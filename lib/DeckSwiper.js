var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:true});exports.default=void 0;var _extends2=_interopRequireDefault(require("@babel/runtime/helpers/extends"));var _defineProperty2=_interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));var _toConsumableArray2=_interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));var _slicedToArray2=_interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));var _react=_interopRequireDefault(require("react"));var _reactNative=require("react-native");var _propTypes=_interopRequireDefault(require("prop-types"));var _Block=_interopRequireDefault(require("./Block"));var _jsxFileName="/Users/jasonbarnett/code/forks/galio/src/DeckSwiper.js";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){(0,_defineProperty2.default)(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}var _Dimensions$get=_reactNative.Dimensions.get('screen'),SCREEN_WIDTH=_Dimensions$get.width;function DeckSwiper(_ref){var onSwipeRight=_ref.onSwipeRight,onSwipeLeft=_ref.onSwipeLeft,focusedElementStyle=_ref.focusedElementStyle,nextElementStyle=_ref.nextElementStyle,components=_ref.components,style=_ref.style;var _React$useState=_react.default.useState(0),_React$useState2=(0,_slicedToArray2.default)(_React$useState,2),currentIndex=_React$useState2[0],setCurrentIndex=_React$useState2[1];var position=new _reactNative.Animated.ValueXY();var rotate=position.x.interpolate({inputRange:[-SCREEN_WIDTH/2,0,SCREEN_WIDTH/2],outputRange:["-10deg","0deg","10deg"],extrapolate:"clamp"});var rotateAndTranslate={transform:[{rotate:rotate}].concat((0,_toConsumableArray2.default)(position.getTranslateTransform()))};var nextCardOpacity=position.x.interpolate({inputRange:[-SCREEN_WIDTH/2,0,SCREEN_WIDTH/2],outputRange:[1,0,1],extrapolate:"clamp"});var nextCardScale=position.x.interpolate({inputRange:[-SCREEN_WIDTH/2,0,SCREEN_WIDTH/2],outputRange:[1,0.8,1],extrapolate:"clamp"});var panResponder=_reactNative.PanResponder.create({onStartShouldSetPanResponder:function onStartShouldSetPanResponder(evt,gestureState){return true;},onPanResponderMove:function onPanResponderMove(evt,gestureState){position.setValue({x:gestureState.dx,y:gestureState.dy});},onPanResponderRelease:function onPanResponderRelease(evt,gestureState){if(gestureState.dx>110){_reactNative.Animated.spring(position,{toValue:{x:SCREEN_WIDTH+100,y:gestureState.dy}}).start(function(){setCurrentIndex(currentIndex+1);});if(onSwipeRight)onSwipeRight();}else if(gestureState.dx<-110){_reactNative.Animated.spring(position,{toValue:{x:-SCREEN_WIDTH-100,y:gestureState.dy}}).start(function(){setCurrentIndex(currentIndex+1);});if(onSwipeLeft)onSwipeLeft();}else{_reactNative.Animated.spring(position,{toValue:{x:0,y:0},friction:4}).start();}}});_react.default.useEffect(function(){position.setValue({x:0,y:0});},[currentIndex]);function renderComponents(components){return components.map(function(item,i){if(i<currentIndex){return null;}else if(i==currentIndex){return _react.default.createElement(_reactNative.Animated.View,(0,_extends2.default)({key:i,style:[rotateAndTranslate,_objectSpread({},_reactNative.StyleSheet.absoluteFillObject),focusedElementStyle]},panResponder.panHandlers,{__source:{fileName:_jsxFileName,lineNumber:91}}),item);}else{return _react.default.createElement(_reactNative.Animated.View,{key:i,style:[_objectSpread({opacity:nextCardOpacity,transform:[{scale:nextCardScale}]},_reactNative.StyleSheet.absoluteFillObject),nextElementStyle],__source:{fileName:_jsxFileName,lineNumber:107}},item);}}).reverse();}return _react.default.createElement(_Block.default,{flex:true,center:true,style:[{width:SCREEN_WIDTH*0.7},style],__source:{fileName:_jsxFileName,lineNumber:122}},renderComponents(components));}DeckSwiper.propTypes={components:_propTypes.default.array.isRequired,onSwipeRight:_propTypes.default.func,onSwipeLeft:_propTypes.default.func,focusedElementStyle:_propTypes.default.any,nextElementStyle:_propTypes.default.any,style:_propTypes.default.any};var _default=DeckSwiper;exports.default=_default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,